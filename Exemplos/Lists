====/====/====/====/====/====/====/====/====

// Stack

push(const T& value): Adds a new element to the top of the stack.
pop(): Removes and returns the element currently at the top of the stack.
top(): Returns a reference to the element at the top of the stack (without removing it). This is useful for inspecting the top value.

empty(): Checks if the stack is empty (returns true if empty, false otherwise). This is crucial for preventing operations on an empty stack.

size(): Returns the number of elements currently in the stack.

====/====/====/====/====/====/====/====/====

// Queue

push(const T& value): Adds a new element to the back of the queue.
pop(): Removes and returns the element at the front of the queue.
front(): Returns a reference to the element at the front of the queue (without removing it). This allows you to examine the element that will be processed next.

empty(): Checks if the queue is empty (returns true if empty, false otherwise). Essential for preventing operations on an empty queue.

size(): Returns the number of elements currently in the queue.


====/====/====/====/====/====/====/====/====

// Queue

from collections import deque
queue = deque() # Create an empty queue
queue = deque([1, 2, 3]) # Create a queue with initial elements

queue.append(item) # Add an item to the rear of the queue

queue.popleft() # Remove and return the element at the front of the queue

queue.clear() # Remove all elements from the queue

queue.rotate(n) # Rotate the elements in the queue (positive n rotates to the right, negative n to the left)

====/====/====/====/====/====/====/====/====

// Stack

stack = [] # Create an empty stack

stack.append(item) # Add an item to the top of the stack

stack.pop() # Remove and return the item at the top of the stack

stack.clear() # Remove all elements from the stack
